// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/31/2019 14:01:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          stepper_motor_forwards
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module stepper_motor_forwards_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg RESET;
// wires                                               
wire blue;
wire debug_dight2;
wire debug_digit0;
wire debug_digit1;
wire orange;
wire pink;
wire yellow;

// assign statements (if any)                          
stepper_motor_forwards i1 (
// port map - connection between master ports and signals/registers   
	.blue(blue),
	.CLK(CLK),
	.debug_dight2(debug_dight2),
	.debug_digit0(debug_digit0),
	.debug_digit1(debug_digit1),
	.orange(orange),
	.pink(pink),
	.RESET(RESET),
	.yellow(yellow)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// RESET
initial
begin
	RESET = 1'b1;
end 
endmodule

